#include<stdio.h>
#include<limits.h>
# define I SHRT_MAX

int cost[3][9]={{1,1,2,2,3,4,4,5,5},
                {2,6,3,7,4,5,7,6,7},
                {25,5,12,10,8,16,14,20,18}};
int set[8]={-1,-1,-1,-1,-1,-1,-1,-1};
int included[9]={0};
int t[2][6];
void myunion(int u,int v)
{
    if(set[u]<set[v])
    {
        
        set[v]+=set[u];
        set[u]=v;
    }
    else
    {
        
        
        set[u]+=set[v];
        set[v]=u;
    }
}
int find(int u)
{
    int x=u,v=0;
    while(set[x]>0)
    {
        x=set[x];
    }
    while(u!=x)
    {
        v=set[u];
        set[u]=x;
        u=v;
    }
    return x;
}
int main()
{
    int i,j,u,v,min,k,n=7,e=9;
    i=0;
    while(i<n-1)
    {
        min=I;
        for(j=0;j<e;j++)
        {
            if(included[j]==0&& cost[2][j]<min)
            {
                min=cost[2][j];
                u=cost[0][j];
                v=cost[1][j];
                k=j;
            }
        }
        if(find(u)!=find(v))
        {
            t[0][i]=u;
            t[1][i]=v;
            myunion(u,v);
            i++;
        }
        included[k]=1;

    }
    for(i=0;i<n-1;i++)
    {
        printf("%d,%d\n",t[0][i],t[1][i]);
    }

}