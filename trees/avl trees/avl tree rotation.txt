#include<stdio.h>
#include<stdlib.h>
struct node 
{
	struct node *lchild;
	int data;
	struct node *rchild;
	int height;
}*root=NULL;
int NodeHeight(struct node *p)
{
	int hl,hr;
	hl=p->lchild?p->lchild->height:0;
	hr=p->rchild?p->rchild->height:0;
	return hl>hr?hl+1:hr+1;
}
int BalanceFactor(struct node* p)
{
	
	int hl,hr;
	hl=p->lchild?p->lchild->height:0;
	hr=p->rchild?p->rchild->height:0;
	return hl-hr;
}
struct node *LLRotation(struct node *p)
{
	struct node *pl=p->lchild;
	
	p->lchild=pl->rchild;
	pl->rchild=p;
	p->height=NodeHeight(p);
	pl->height=NodeHeight(pl);

	if(root==p)
	root=pl;
	return pl;
}
struct node *LRRotation(struct node *p)
{
	struct node *pl=p->lchild;
	struct node *plr=pl->rchild;
	p->lchild=plr->rchild;
	pl->rchild=plr->lchild;
	plr->lchild=pl;
	plr->rchild=p;
	pl->height=NodeHeight(pl);
	p->height=NodeHeight(p);
	plr->height=NodeHeight(plr);
	if(root==p)
	root=plr;
	return plr;
}
struct node *RRRotation(struct node *p)
{
 struct node *pr=p->rchild;
 p->rchild=pr->lchild;
 pr->lchild=p;
 p->height=NodeHeight(p);
 pr->height=NodeHeight(pr);
 if(root==p)
 root=pr;
 return pr;
}
struct node *RLRotation(struct node *p)
{
	struct node *pr=p->rchild;
	struct node *prl=pr->lchild;
	p->rchild=prl->lchild;
	pr->lchild=prl->rchild;
	prl->lchild=p;
	prl->rchild=pr;
	p->height=NodeHeight(p);
	pr->height=NodeHeight(pr);
	prl->height=NodeHeight(prl);
	if(root==p)
	root=prl;
	return prl;
	
}

struct node *RInsert(struct node *p,int key)
{
	struct node* t;
	if(p==NULL)
	{
		t=(struct node*)malloc(sizeof(struct node));
		t->data =key;
		t->rchild=t->lchild=NULL;
		t->height=1;
		return t;
	}
	if(key<p->data)
	p->lchild=RInsert(p->lchild,key);
	else if(key>p->data)
	p->rchild=RInsert(p->rchild,key);
	p->height=NodeHeight(p);
	if(BalanceFactor(p)==2 and BalanceFactor(p->lchild)==1)
	return LLRotation(p);
	else if(BalanceFactor(p)==2 and BalanceFactor(p->lchild)==-1)
	return LRRotation(p);
	else if(BalanceFactor(p)==-2 and BalanceFactor(p->rchild)==-1)
	return RRRotation(p);
	else if(BalanceFactor(p)==-2 and BalanceFactor(p->rchild)==1)
	return RLRotation(p);
	
	return p;
}
	
	void preorder(struct node *p)
	{
		if(p!=NULL)
		{
		
		printf("%d ",p->data);
		preorder(p->lchild);
		preorder(p->rchild);
	  }
	}
int main()
{
	root=RInsert(root,20);
	RInsert(root,30);
	RInsert(root,25);
	preorder(root);
	return 0;
	
}